// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: pb/service.proto

package grpcbin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GrpcbinService_Unary_FullMethodName                  = "/main.GrpcbinService/Unary"
	GrpcbinService_ServerStreaming_FullMethodName        = "/main.GrpcbinService/ServerStreaming"
	GrpcbinService_ClientStreaming_FullMethodName        = "/main.GrpcbinService/ClientStreaming"
	GrpcbinService_BidirectionalStreaming_FullMethodName = "/main.GrpcbinService/BidirectionalStreaming"
)

// GrpcbinServiceClient is the client API for GrpcbinService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcbinServiceClient interface {
	// Unary RPC
	Unary(ctx context.Context, in *UnaryRequest, opts ...grpc.CallOption) (*UnaryResponse, error)
	// Server streaming RPC
	ServerStreaming(ctx context.Context, in *ServerStreamingRequest, opts ...grpc.CallOption) (GrpcbinService_ServerStreamingClient, error)
	// Client streaming RPC
	ClientStreaming(ctx context.Context, opts ...grpc.CallOption) (GrpcbinService_ClientStreamingClient, error)
	// Bidirectional streaming RPC
	BidirectionalStreaming(ctx context.Context, opts ...grpc.CallOption) (GrpcbinService_BidirectionalStreamingClient, error)
}

type grpcbinServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcbinServiceClient(cc grpc.ClientConnInterface) GrpcbinServiceClient {
	return &grpcbinServiceClient{cc}
}

func (c *grpcbinServiceClient) Unary(ctx context.Context, in *UnaryRequest, opts ...grpc.CallOption) (*UnaryResponse, error) {
	out := new(UnaryResponse)
	err := c.cc.Invoke(ctx, GrpcbinService_Unary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcbinServiceClient) ServerStreaming(ctx context.Context, in *ServerStreamingRequest, opts ...grpc.CallOption) (GrpcbinService_ServerStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &GrpcbinService_ServiceDesc.Streams[0], GrpcbinService_ServerStreaming_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcbinServiceServerStreamingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GrpcbinService_ServerStreamingClient interface {
	Recv() (*ServerStreamingResponse, error)
	grpc.ClientStream
}

type grpcbinServiceServerStreamingClient struct {
	grpc.ClientStream
}

func (x *grpcbinServiceServerStreamingClient) Recv() (*ServerStreamingResponse, error) {
	m := new(ServerStreamingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *grpcbinServiceClient) ClientStreaming(ctx context.Context, opts ...grpc.CallOption) (GrpcbinService_ClientStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &GrpcbinService_ServiceDesc.Streams[1], GrpcbinService_ClientStreaming_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcbinServiceClientStreamingClient{stream}
	return x, nil
}

type GrpcbinService_ClientStreamingClient interface {
	Send(*ClientStreamingRequest) error
	CloseAndRecv() (*ClientStreamingResponse, error)
	grpc.ClientStream
}

type grpcbinServiceClientStreamingClient struct {
	grpc.ClientStream
}

func (x *grpcbinServiceClientStreamingClient) Send(m *ClientStreamingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *grpcbinServiceClientStreamingClient) CloseAndRecv() (*ClientStreamingResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ClientStreamingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *grpcbinServiceClient) BidirectionalStreaming(ctx context.Context, opts ...grpc.CallOption) (GrpcbinService_BidirectionalStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &GrpcbinService_ServiceDesc.Streams[2], GrpcbinService_BidirectionalStreaming_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcbinServiceBidirectionalStreamingClient{stream}
	return x, nil
}

type GrpcbinService_BidirectionalStreamingClient interface {
	Send(*BidirectionalStreamingRequest) error
	Recv() (*BidirectionalStreamingResponse, error)
	grpc.ClientStream
}

type grpcbinServiceBidirectionalStreamingClient struct {
	grpc.ClientStream
}

func (x *grpcbinServiceBidirectionalStreamingClient) Send(m *BidirectionalStreamingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *grpcbinServiceBidirectionalStreamingClient) Recv() (*BidirectionalStreamingResponse, error) {
	m := new(BidirectionalStreamingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GrpcbinServiceServer is the server API for GrpcbinService service.
// All implementations must embed UnimplementedGrpcbinServiceServer
// for forward compatibility
type GrpcbinServiceServer interface {
	// Unary RPC
	Unary(context.Context, *UnaryRequest) (*UnaryResponse, error)
	// Server streaming RPC
	ServerStreaming(*ServerStreamingRequest, GrpcbinService_ServerStreamingServer) error
	// Client streaming RPC
	ClientStreaming(GrpcbinService_ClientStreamingServer) error
	// Bidirectional streaming RPC
	BidirectionalStreaming(GrpcbinService_BidirectionalStreamingServer) error
	mustEmbedUnimplementedGrpcbinServiceServer()
}

// UnimplementedGrpcbinServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGrpcbinServiceServer struct {
}

func (UnimplementedGrpcbinServiceServer) Unary(context.Context, *UnaryRequest) (*UnaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unary not implemented")
}
func (UnimplementedGrpcbinServiceServer) ServerStreaming(*ServerStreamingRequest, GrpcbinService_ServerStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStreaming not implemented")
}
func (UnimplementedGrpcbinServiceServer) ClientStreaming(GrpcbinService_ClientStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStreaming not implemented")
}
func (UnimplementedGrpcbinServiceServer) BidirectionalStreaming(GrpcbinService_BidirectionalStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalStreaming not implemented")
}
func (UnimplementedGrpcbinServiceServer) mustEmbedUnimplementedGrpcbinServiceServer() {}

// UnsafeGrpcbinServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcbinServiceServer will
// result in compilation errors.
type UnsafeGrpcbinServiceServer interface {
	mustEmbedUnimplementedGrpcbinServiceServer()
}

func RegisterGrpcbinServiceServer(s grpc.ServiceRegistrar, srv GrpcbinServiceServer) {
	s.RegisterService(&GrpcbinService_ServiceDesc, srv)
}

func _GrpcbinService_Unary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcbinServiceServer).Unary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcbinService_Unary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcbinServiceServer).Unary(ctx, req.(*UnaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcbinService_ServerStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ServerStreamingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GrpcbinServiceServer).ServerStreaming(m, &grpcbinServiceServerStreamingServer{stream})
}

type GrpcbinService_ServerStreamingServer interface {
	Send(*ServerStreamingResponse) error
	grpc.ServerStream
}

type grpcbinServiceServerStreamingServer struct {
	grpc.ServerStream
}

func (x *grpcbinServiceServerStreamingServer) Send(m *ServerStreamingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GrpcbinService_ClientStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GrpcbinServiceServer).ClientStreaming(&grpcbinServiceClientStreamingServer{stream})
}

type GrpcbinService_ClientStreamingServer interface {
	SendAndClose(*ClientStreamingResponse) error
	Recv() (*ClientStreamingRequest, error)
	grpc.ServerStream
}

type grpcbinServiceClientStreamingServer struct {
	grpc.ServerStream
}

func (x *grpcbinServiceClientStreamingServer) SendAndClose(m *ClientStreamingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *grpcbinServiceClientStreamingServer) Recv() (*ClientStreamingRequest, error) {
	m := new(ClientStreamingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GrpcbinService_BidirectionalStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GrpcbinServiceServer).BidirectionalStreaming(&grpcbinServiceBidirectionalStreamingServer{stream})
}

type GrpcbinService_BidirectionalStreamingServer interface {
	Send(*BidirectionalStreamingResponse) error
	Recv() (*BidirectionalStreamingRequest, error)
	grpc.ServerStream
}

type grpcbinServiceBidirectionalStreamingServer struct {
	grpc.ServerStream
}

func (x *grpcbinServiceBidirectionalStreamingServer) Send(m *BidirectionalStreamingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *grpcbinServiceBidirectionalStreamingServer) Recv() (*BidirectionalStreamingRequest, error) {
	m := new(BidirectionalStreamingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GrpcbinService_ServiceDesc is the grpc.ServiceDesc for GrpcbinService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrpcbinService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.GrpcbinService",
	HandlerType: (*GrpcbinServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Unary",
			Handler:    _GrpcbinService_Unary_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStreaming",
			Handler:       _GrpcbinService_ServerStreaming_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientStreaming",
			Handler:       _GrpcbinService_ClientStreaming_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BidirectionalStreaming",
			Handler:       _GrpcbinService_BidirectionalStreaming_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pb/service.proto",
}
